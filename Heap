class Heap
{
    private int[] heapArr;
    private int capacity;
    private int size;

    public Heap(int capacity)
    {
        this.capacity = capacity;
        heapArr = new int[capacity];
        size = 0;
    }

    private int ParentIndex(int idx)
    {
        return (idx - 1) / 2;
    }

    private int LeftChildIndex(int idx)
    {
        return 2 * idx + 1;
    }

    private int RightChildIndex(int idx)
    {
        return 2 * idx + 2;
    }

    public void ViewHeapArr()
    {
        for (int i = 0; i < size; ++i)
            Console.WriteLine(heapArr[i]);
    }

    public void insert(int item)
    {
        heapArr[size++] = item;

        int idx = size - 1;

        while (idx > 0)
        {
            int parent = ParentIndex(idx);
            // 최소 힙
            if (heapArr[parent].CompareTo(heapArr[idx]) <= 0)
                break;

            // C# 7.0 이상에서 지원하는 Tuple 활용한 swap
            (heapArr[parent], heapArr[idx]) = (heapArr[idx], heapArr[parent]);
        }

    }

    public int remove() 
    {
        if (EmptyHeap())
            return -1;

        int root = heapArr[0];
        int idx = 0;
        int leftIdx, rightIdx, minIdx;

        heapArr[idx] = heapArr[size - 1];
        heapArr[size - 1] = 0;
        size--;

        while (true)
        {
            minIdx = idx;
            leftIdx = LeftChildIndex(idx);
            rightIdx = RightChildIndex(idx);

            if (leftIdx < size && heapArr[leftIdx] < heapArr[minIdx])
            {
                minIdx = leftIdx;
            }

            if (rightIdx < size && heapArr[rightIdx] < heapArr[minIdx])
            {
                minIdx = rightIdx;
            }

            if (minIdx != idx)
            {
                (heapArr[idx], heapArr[minIdx]) = (heapArr[minIdx], heapArr[idx]);
                idx = minIdx;
            }
            else
                break;
        }

        return root;
    }

    private bool EmptyHeap()
    {
        if (size == 0)
            throw new Exception("heap is Empty !!!");
        else
            return false;
    }

    public int Peek()
    {
        if (!EmptyHeap())
            return heapArr[0];
        else
            return -1;
    }
}
